using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Runtime.CompilerServices;

namespace Lenneth.Core.Extensions
{
    [DebuggerStepThrough]
    public static class TypeExtensions
    {
        public static bool IsDerivedFrom(this Type aType, Type aBaseType)
        {
            Debug.Assert(aType != null);
            Debug.Assert(aBaseType != null);
            Debug.Assert(aType.IsClass);
            Debug.Assert(aBaseType.IsClass);

            return aBaseType.IsAssignableFrom(aType);
        }

        public static bool IsImplementInterface(this Type aType, Type aInterfaceType)
        {
            Debug.Assert(aType != null);
            Debug.Assert(aInterfaceType != null);
            Debug.Assert(aType.IsClass || aType.IsInterface || aType.IsValueType);
            Debug.Assert(aInterfaceType.IsInterface);

            return aInterfaceType.IsAssignableFrom(aType);
        }

        public static IEnumerable<Type> GetBaseTypes(this Type aType,
            bool aWithThis = false)
        {
            if (aWithThis)
                yield return aType;

            var t = aType;

            while (t.BaseType != null)
            {
                t = t.BaseType;
                yield return t;
            }
        }

        public static string GetParentFullName(this Type aType)
        {
            return Path.GetFileNameWithoutExtension(aType.FullName);
        }

        /// <summary>
        /// Get all private, protected, public properties from this type and sub-types.
        /// Without abstract properties. In case of overriding return top-most one.
        /// </summary>
        /// <param name="aType"></param>
        /// <returns></returns>
        public static IEnumerable<PropertyInfo> GetAllProperties(this Type aType)
        {
            var result = new List<PropertyInfo>();

            foreach (var t in aType.GetBaseTypes(true))
            {
                if (t == typeof(Object))
                    break;
                if (t == typeof(ValueType))
                    break;

                var typeProps = t.GetProperties(
                    BindingFlags.Public | BindingFlags.NonPublic |
                    BindingFlags.Instance);

                foreach (var possProp in typeProps.Reverse())
                {
                    if (possProp.IsAbstract())
                        continue;

                    if (result.All(prop => !prop.IsDerivedFrom(possProp, true)))
                        result.Add(possProp);
                }
            }

            result.Reverse();
            return result;
        }

        public static IEnumerable<MethodInfo> GetAllMethods(this Type aType,
            bool aIncludeAutogenerated = false)
        {
            var result = new List<MethodInfo>();

            foreach (var t in aType.GetBaseTypes(true))
            {
                if (t == typeof(Object))
                    break;
                if (t == typeof(ValueType))
                    break;

                var methods = t.GetMethods(
                    BindingFlags.Public | BindingFlags.NonPublic |
                    BindingFlags.Instance);

                foreach (var method in methods.Reverse())
                {
                    if (method.IsDefined(typeof(CompilerGeneratedAttribute), true) &&
                        !aIncludeAutogenerated)
                    {
                        continue;
                    }

                    if (method.IsAbstract)
                        continue;
                    if (result.All(m => !m.IsDerivedFrom(method, true)))
                    {
                        result.Add(method);
                        yield return method;
                    }
                }
            }
        }

        public static IEnumerable<FieldInfo> GetAllFields(this Type aType,
            bool aIncludeAutogenerated = false)
        {
            foreach (var t in aType.GetBaseTypes(true).Reverse())
            {
                if (t == typeof(Object))
                    continue;
                if (t == typeof(ValueType))
                    continue;

                var fields = t.GetFields(BindingFlags.Instance | BindingFlags.Public |
                    BindingFlags.NonPublic);

                foreach (var field in fields)
                {
                    if (field.IsDefined(typeof(CompilerGeneratedAttribute), true) &&
                        !aIncludeAutogenerated)
                    {
                        continue;
                    }

                    if (field.DeclaringType == t)
                        yield return field;
                }
            }
        }

        public static ConstructorInfo GetConstructor(this Type aType)
        {
            return aType.GetConstructor(Type.EmptyTypes);
        }

        public static ConstructorInfo GetConstructor(this Type aType, params Type[] aTypes)
        {
            return aType.GetConstructor(aTypes);
        }
    }
}